# -*- coding: utf-8 -*-
"""app6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfYeuS7uupRthGfjIHmOt4Ym4-fpZoX4
"""

import streamlit as st
import joblib
import pandas as pd
import plotly.express as px
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load the trained Random Forest model
model_filename = 'random_forest_model.pkl'
rf_model = joblib.load(model_filename)

# Load your original dataset for reference
file_path = 'customer_booking.csv'
df = pd.read_csv(file_path, encoding='ISO-8859-1')

# Step 1: Data Preprocessing to recreate the necessary encoders and features
day_mapping = {'Mon': 1, 'Tue': 2, 'Wed': 3, 'Thu': 4, 'Fri': 5, 'Sat': 6, 'Sun': 7}

# Create encoders for 'sales_channel' and 'trip_type'
label_encoder_sales_channel = LabelEncoder()
label_encoder_trip_type = LabelEncoder()

# Apply label encoding and create new columns
df['sales_channel_encoded'] = label_encoder_sales_channel.fit_transform(df['sales_channel'])
df['trip_type_encoded'] = label_encoder_trip_type.fit_transform(df['trip_type'])

# Apply mapping for 'flight_day'
df['flight_day_encoded'] = df['flight_day'].map(day_mapping).fillna(0)  # Fill NaN with 0

# Apply frequency encoding for 'route' and 'booking_origin'
route_freq_encoding = df['route'].value_counts(normalize=True)
booking_origin_freq_encoding = df['booking_origin'].value_counts(normalize=True)

df['route_encoded'] = df['route'].map(route_freq_encoding).fillna(0)  # Fill NaN with 0 if not found
df['booking_origin_encoded'] = df['booking_origin'].map(booking_origin_freq_encoding).fillna(0)  # Fill NaN with 0

# Step 2: Define feature names
feature_names = [
    'num_passengers', 'purchase_lead', 'length_of_stay', 'flight_hour', 'flight_day_encoded',
    'wants_extra_baggage', 'wants_preferred_seat', 'wants_in_flight_meals',
    'flight_duration', 'sales_channel_encoded', 'trip_type_encoded',
    'route_encoded', 'booking_origin_encoded'
]

# Step 3: Feature scaling using StandardScaler
scaler = StandardScaler()
scaler.fit(df[feature_names])

# Streamlit App
st.title("Flight Booking Completion Prediction with Feature Importance")

# Collect user inputs using Streamlit widgets
num_passengers = st.number_input("Number of Passengers", min_value=1, max_value=10, value=1)
purchase_lead = st.number_input("Purchase Lead (days)", min_value=0, value=0)
length_of_stay = st.number_input("Length of Stay (days)", min_value=0, value=1)
flight_hour = st.number_input("Flight Hour (0-23)", min_value=0, max_value=23, value=12)
flight_day = st.selectbox("Flight Day", ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'])
wants_extra_baggage = st.selectbox("Wants Extra Baggage", [0, 1])
wants_preferred_seat = st.selectbox("Wants Preferred Seat", [0, 1])
wants_in_flight_meals = st.selectbox("Wants In-flight Meals", [0, 1])
flight_duration = st.number_input("Flight Duration (hours)", min_value=0.0, value=1.0)
sales_channel = st.selectbox("Sales Channel", label_encoder_sales_channel.classes_)
trip_type = st.selectbox("Trip Type", label_encoder_trip_type.classes_)
route = st.text_input("Route (e.g., 'NYC-LAX')")
booking_origin = st.text_input("Booking Origin (e.g., 'USA')")

# Encode inputs
flight_day_encoded = day_mapping.get(flight_day, 0)
sales_channel_encoded = label_encoder_sales_channel.transform([sales_channel])[0]
trip_type_encoded = label_encoder_trip_type.transform([trip_type])[0]
route_encoded = route_freq_encoding.get(route, 0)
booking_origin_encoded = booking_origin_freq_encoding.get(booking_origin, 0)

# Prepare the input data for prediction
user_input = pd.DataFrame([[
    num_passengers, purchase_lead, length_of_stay, flight_hour, flight_day_encoded,
    wants_extra_baggage, wants_preferred_seat, wants_in_flight_meals,
    flight_duration, sales_channel_encoded, trip_type_encoded,
    route_encoded, booking_origin_encoded
]], columns=feature_names)

# Scale the input features
user_input_scaled = scaler.transform(user_input)

# Prediction button
if st.button("Predict"):
    prediction = rf_model.predict(user_input_scaled)
    result = "Booking Complete" if prediction[0] == 1 else "Booking Incomplete"
    st.success(f"Prediction: {result}")

# Feature Importance
if st.checkbox("Show Feature Importance"):
    feature_importance = rf_model.feature_importances_
    importance_df = pd.DataFrame({
        'Feature': feature_names,
        'Importance': feature_importance
    }).sort_values(by='Importance', ascending=False)

    # Plot feature importance using Plotly Express
    st.subheader("Feature Importance")
    fig = px.bar(
        importance_df,
        x='Importance',
        y='Feature',
        orientation='h',
        title="Feature Importance",
        labels={'Importance': 'Importance', 'Feature': 'Feature'},
        height=600
    )
    fig.update_layout(yaxis={'categoryorder': 'total ascending'})
    st.plotly_chart(fig)